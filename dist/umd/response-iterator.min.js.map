{"version":3,"file":"response-iterator.min.js","sources":["../../src/index.ts"],"sourcesContent":["import { AxiosResponse } from \"axios\";\nimport { Response as NodeResponse } from \"node-fetch\";\n\ninterface CrossFetchResponse {\n  _bodyBlob: Blob;\n}\n\nfunction streamIterator<T>(stream): AsyncIterableIterator<T> {\n  const iterator = stream[Symbol.asyncIterator]();\n  return {\n    next(): Promise<IteratorResult<T, boolean>> {\n      return iterator.next();\n    },\n    [Symbol.asyncIterator](): AsyncIterator<T> {\n      return this;\n    },\n  } as AsyncIterableIterator<T>;\n}\n\n/* c8 ignore start */\nfunction readerIterator<T>(reader): AsyncIterableIterator<T> {\n  return {\n    next(): Promise<IteratorResult<T, boolean>> {\n      return reader.read();\n    },\n    [Symbol.asyncIterator](): AsyncIterator<T> {\n      return this;\n    },\n  } as AsyncIterableIterator<T>;\n}\n\nfunction promiseIterator<T>(promise): AsyncIterableIterator<T> {\n  let resolved = false;\n  return {\n    next(): Promise<IteratorResult<T, boolean>> {\n      if (resolved) return Promise.resolve({ value: undefined, done: true });\n      resolved = true;\n      return new Promise(function (resolve, reject) {\n        promise\n          .then(function (value) {\n            resolve({ value, done: false });\n          })\n          .catch(reject);\n      });\n    },\n    [Symbol.asyncIterator](): AsyncIterator<T> {\n      return this;\n    },\n  } as AsyncIterableIterator<T>;\n}\n/* c8 ignore stop */\n\n/**\n * @param response A response. Supports fetch, node-fetch, and cross-fetch\n */\nexport default function responseIterator<T>(response: unknown): AsyncIterableIterator<T> {\n  if (response === undefined) throw new Error(\"Missing response for responseIterator\");\n\n  // determine the body\n  let body: unknown = response;\n  if ((response as NodeResponse).body) body = (response as NodeResponse).body;\n  // node-fetch, browser fetch, undici\n  else if ((response as AxiosResponse).data) body = (response as AxiosResponse).data;\n  // axios\n  /* c8 ignore start */ else if ((response as CrossFetchResponse)._bodyBlob)\n    body = (response as CrossFetchResponse)._bodyBlob; // cross-fetch\n  /* c8 ignore stop */\n\n  // adapt the body\n  if (body[Symbol.asyncIterator]) return streamIterator<T>(body as AsyncIterableIterator<T>);\n  /* c8 ignore start */\n  if ((body as ReadableStream<T>).getReader) return readerIterator<T>((body as ReadableStream<T>).getReader());\n  if ((body as Blob).stream)\n    return readerIterator<T>(((body as Blob).stream() as unknown as ReadableStream<T>).getReader());\n  if ((body as Blob).arrayBuffer) return promiseIterator<T>((body as Blob).arrayBuffer());\n  /* c8 ignore stop */\n\n  throw new Error(\"Unknown body type for responseIterator. Maybe you are not passing a streamable response\");\n}\n"],"names":["readerIterator","reader","next","read","Symbol","asyncIterator","this","response","undefined","Error","iterator","promise","resolved","body","data","_bodyBlob","getReader","stream","arrayBuffer","Promise","resolve","value","done","reject","then"],"mappings":"yWAoBA,SAASA,EAAkBC,aAEvBC,uBACSD,EAAOE,SAEfC,OAAOC,iCACCC,eA6BE,SAA6BC,WACzBC,IAAbD,EAAwB,MAAM,IAAIE,MAAM,6CAhDtCC,EAuBoBC,EACtBC,EA2BAC,EAAgBN,KACfA,EAA0BM,KAAMA,EAAQN,EAA0BM,KAE7DN,EAA2BO,KAAMD,EAAQN,EAA2BO,KAE9CP,EAAgCQ,YAC9DF,EAAQN,EAAgCQ,WAItCF,EAAKT,OAAOC,eAAgB,OA7D1BK,EA6DmDG,EA7DjCT,OAAOC,oBAE7BH,uBACSQ,EAASR,SAEjBE,OAAOC,iCACCC,WAyDNO,EAA2BG,UAAW,OAAOhB,EAAmBa,EAA2BG,gBAC3FH,EAAcI,OACjB,OAAOjB,EAAoBa,EAAcI,SAA0CD,gBAChFH,EAAcK,YAAa,OA3CNP,EA2CiCE,EAAcK,cA1CrEN,GAAW,KAEbV,uBACMU,EAAiBO,QAAQC,QAAQ,CAAEC,WAAOb,EAAWc,MAAM,KAC/DV,GAAW,EACJ,IAAIO,SAAQ,SAAUC,EAASG,GACpCZ,EACGa,MAAK,SAAUH,GACdD,EAAQ,CAAEC,MAAAA,EAAOC,MAAM,aAElBC,SAGZnB,OAAOC,iCACCC,cA+BL,IAAIG,MAAM"}