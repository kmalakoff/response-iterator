{"version":3,"file":"response-iterator.min.js","sources":["../../src/index.ts"],"sourcesContent":["import { Response as NodeResponse } from \"node-fetch\";\n\ninterface CrossFetchResponse {\n  _bodyBlob: Blob;\n}\n\nfunction streamIterator<T>(stream): AsyncIterableIterator<T> {\n  const iterator = stream[Symbol.asyncIterator]();\n  return {\n    next(): Promise<IteratorResult<T, boolean>> {\n      return iterator.next();\n    },\n    [Symbol.asyncIterator](): AsyncIterator<T> {\n      return this;\n    },\n  } as AsyncIterableIterator<T>;\n}\n\n/* c8 ignore start */\nfunction readerIterator<T>(reader): AsyncIterableIterator<T> {\n  return {\n    next(): Promise<IteratorResult<T, boolean>> {\n      return reader.read();\n    },\n    [Symbol.asyncIterator](): AsyncIterator<T> {\n      return this;\n    },\n  } as AsyncIterableIterator<T>;\n}\n\nfunction promiseIterator<T>(promise): AsyncIterableIterator<T> {\n  let resolved = false;\n  return {\n    next(): Promise<IteratorResult<T, boolean>> {\n      if (resolved) return Promise.resolve({ value: undefined, done: true });\n      resolved = true;\n      return new Promise(function (resolve, reject) {\n        promise\n          .then(function (value) {\n            resolve({ value, done: false });\n          })\n          .catch(reject);\n      });\n    },\n    [Symbol.asyncIterator](): AsyncIterator<T> {\n      return this;\n    },\n  } as AsyncIterableIterator<T>;\n}\n/* c8 ignore stop */\n\n/**\n * @param response A response. Supports fetch, node-fetch, and cross-fetch\n */\nexport default function responseIterator<T>(\n  response: Response | NodeResponse | CrossFetchResponse\n): AsyncIterableIterator<T> {\n  if (response === undefined) throw new Error(\"Missing response for responseIterator\");\n\n  // node-fetch\n  if ((response as NodeResponse).body && (response as NodeResponse).body[Symbol.asyncIterator] !== undefined)\n    return streamIterator<T>((response as NodeResponse).body);\n  /* c8 ignore start */\n  // browser fetch\n  else if ((response as Response).body && (response as Response).body.getReader)\n    return readerIterator<T>((response as Response).body.getReader());\n  // browser cross-fetch\n  else if ((response as CrossFetchResponse)._bodyBlob)\n    return promiseIterator<T>((response as CrossFetchResponse)._bodyBlob.arrayBuffer());\n  /* c8 ignore stop */\n\n  throw new Error(\"Unknown body type for responseIterator\");\n}\n"],"names":["response","undefined","Error","body","Symbol","asyncIterator","stream","iterator","next","this","getReader","reader","read","_bodyBlob","promise","arrayBuffer","resolved","Promise","resolve","value","done","reject","then"],"mappings":"gXAsDe,SACbA,WAEiBC,IAAbD,EAAwB,MAAM,IAAIE,MAAM,4CAGvCF,EAA0BG,WAAkEF,IAAzDD,EAA0BG,KAAKC,OAAOC,eAC5E,OAvDuBC,EAuDGN,EAA0BG,KAtDhDI,EAAWD,EAAOF,OAAOC,oBAE7BG,uBACSD,EAASC,SAEjBJ,OAAOC,iCACCI,QAmDN,GAAKT,EAAsBG,MAASH,EAAsBG,KAAKO,UAClE,OA9CuBC,EA8CGX,EAAsBG,KAAKO,eA5CrDF,uBACSG,EAAOC,SAEfR,OAAOC,iCACCI,QA0CN,GAAKT,EAAgCa,UACxC,OAtCwBC,EAsCGd,EAAgCa,UAAUE,cArCnEC,GAAW,KAEbR,uBACMQ,EAAiBC,QAAQC,QAAQ,CAAEC,WAAOlB,EAAWmB,MAAM,KAC/DJ,GAAW,EACJ,IAAIC,SAAQ,SAAUC,EAASG,GACpCP,EACGQ,MAAK,SAAUH,GACdD,EAAQ,CAAEC,MAAAA,EAAOC,MAAM,aAElBC,SAGZjB,OAAOC,iCACCI,QAfb,IAA4BK,EACtBE,EAZqBL,EAbAL,EACnBC,QAgEA,IAAIL,MAAM"}