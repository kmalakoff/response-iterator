{"version":3,"sources":["../../src/index.ts"],"names":["asyncIterator","nodeStreamIterator","promiseIterator","readerIterator","hasIterator","Symbol","responseIterator","response","undefined","Error","body","data","_bodyBlob","getReader","stream","arrayBuffer","pipe"],"mappings":"OAIOA,a;OACAC,kB;OACAC,e;OACAC,c;AAMP,MAAMC,WAAW,GAAG,OAAOC,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,CAACL,aAA5D;AAEA;AACA;AACA;;AACA,eAAe,SAASM,gBAAT,CAA6BC,QAA7B,EAA0E;AACvF,MAAIA,QAAQ,KAAKC,SAAjB,EAA4B,MAAM,IAAIC,KAAJ,CAAU,uCAAV,CAAN,CAD2D,CAGvF;;AACA,MAAIC,IAAa,GAAGH,QAApB;AACA,MAAKA,QAAD,CAA2BG,IAA/B,EAAqCA,IAAI,GAAIH,QAAD,CAA2BG,IAAlC,CAArC,CACA;AADA,OAEK,IAAKH,QAAD,CAA4BI,IAAhC,EAAsCD,IAAI,GAAIH,QAAD,CAA4BI,IAAnC,CAAtC,CACL;;AACA;AAFK,OAEsB,IAAKJ,QAAD,CAAiCK,SAArC,EACzBF,IAAI,GAAIH,QAAD,CAAiCK,SAAxC,CAVqF,CAUlC;;AACrD;AAEA;;AACA,MAAIR,WAAW,IAAIM,IAAI,CAACL,MAAM,CAACL,aAAR,CAAvB,EAA+C,OAAOA,aAAa,CAAIU,IAAJ,CAApB;AAC/C;;AACA,MAAKA,IAAD,CAA4BG,SAAhC,EAA2C,OAAOV,cAAc,CAAKO,IAAD,CAA4BG,SAA5B,EAAJ,CAArB;AAC3C,MAAKH,IAAD,CAAeI,MAAnB,EACE,OAAOX,cAAc,CAAMO,IAAD,CAAeI,MAAf,EAAD,CAA0DD,SAA1D,EAAJ,CAArB;AACF,MAAKH,IAAD,CAAeK,WAAnB,EAAgC,OAAOb,eAAe,CAAKQ,IAAD,CAAeK,WAAf,EAAJ,CAAtB;AAChC,MAAKL,IAAD,CAA6BM,IAAjC,EAAuC,OAAOf,kBAAkB,CAAIS,IAAJ,CAAzB;AACvC;;AAEA,QAAM,IAAID,KAAJ,CAAU,yFAAV,CAAN;AACD","sourcesContent":["import { AxiosResponse } from \"axios\";\nimport { Response as NodeResponse } from \"node-fetch\";\nimport { Readable as NodeReadableStream } from \"stream\";\n\nimport asyncIterator from \"./iterators/async\";\nimport nodeStreamIterator from \"./iterators/nodeStream\";\nimport promiseIterator from \"./iterators/promise\";\nimport readerIterator from \"./iterators/reader\";\n\ninterface CrossFetchResponse {\n  _bodyBlob: Blob;\n}\n\nconst hasIterator = typeof Symbol !== \"undefined\" && Symbol.asyncIterator;\n\n/**\n * @param response A response. Supports fetch, node-fetch, and cross-fetch\n */\nexport default function responseIterator<T>(response: unknown): AsyncIterableIterator<T> {\n  if (response === undefined) throw new Error(\"Missing response for responseIterator\");\n\n  // determine the body\n  let body: unknown = response;\n  if ((response as NodeResponse).body) body = (response as NodeResponse).body;\n  // node-fetch, browser fetch, undici\n  else if ((response as AxiosResponse).data) body = (response as AxiosResponse).data;\n  // axios\n  /* c8 ignore start */ else if ((response as CrossFetchResponse)._bodyBlob)\n    body = (response as CrossFetchResponse)._bodyBlob; // cross-fetch\n  /* c8 ignore stop */\n\n  // adapt the body\n  if (hasIterator && body[Symbol.asyncIterator]) return asyncIterator<T>(body as AsyncIterableIterator<T>);\n  /* c8 ignore start */\n  if ((body as ReadableStream<T>).getReader) return readerIterator<T>((body as ReadableStream<T>).getReader());\n  if ((body as Blob).stream)\n    return readerIterator<T>(((body as Blob).stream() as unknown as ReadableStream<T>).getReader());\n  if ((body as Blob).arrayBuffer) return promiseIterator<T>((body as Blob).arrayBuffer());\n  if ((body as NodeReadableStream).pipe) return nodeStreamIterator<T>(body as NodeReadableStream);\n  /* c8 ignore stop */\n\n  throw new Error(\"Unknown body type for responseIterator. Maybe you are not passing a streamable response\");\n}\n"],"file":"index.js"}