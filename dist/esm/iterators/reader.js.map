{"version":3,"sources":["../../../src/iterators/reader.ts"],"names":["hasIterator","Symbol","asyncIterator","readerIterator","reader","iterator","next","read"],"mappings":"AAAA,MAAMA,WAAW,GAAG,OAAOC,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,CAACC,aAA5D;AAEA;;AACA,eAAe,SAASC,cAAT,CAA2BC,MAA3B,EAA6D;AAC1E,QAAMC,QAAQ,GAAG;AACfC,IAAAA,IAAI,GAAwC;AAC1C,aAAOF,MAAM,CAACG,IAAP,EAAP;AACD;;AAHc,GAAjB;;AAMA,MAAIP,WAAJ,EAAiB;AACfK,IAAAA,QAAQ,CAACJ,MAAM,CAACC,aAAR,CAAR,GAAiC,YAA8B;AAC7D,aAAO,IAAP;AACD,KAFD;AAGD;;AAED,SAAOG,QAAP;AACD;AACD","sourcesContent":["const hasIterator = typeof Symbol !== \"undefined\" && Symbol.asyncIterator;\n\n/* c8 ignore start */\nexport default function readerIterator<T>(reader): AsyncIterableIterator<T> {\n  const iterator = {\n    next(): Promise<IteratorResult<T, boolean>> {\n      return reader.read();\n    },\n  };\n\n  if (hasIterator) {\n    iterator[Symbol.asyncIterator] = function (): AsyncIterator<T> {\n      return this;\n    };\n  }\n\n  return iterator as AsyncIterableIterator<T>;\n}\n/* c8 ignore stop */\n"],"file":"reader.js"}